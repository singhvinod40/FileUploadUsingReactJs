package com.googleCloud.gcpDemo.controller;


import com.google.auth.oauth2.ServiceAccountCredentials;
import com.google.cloud.storage.BlobInfo;
import com.google.cloud.storage.HttpMethod;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.FileInputStream;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

@RestController
@Slf4j
@CrossOrigin(origins = "http://localhost:3000")
@RequestMapping("/api")
public class StorageController {


    private static final Map<String, String> authMap = new HashMap<>();

    // Initialize your authentication map with username-password pairs
    static {
        authMap.put("knight", "hackers");
        authMap.put("Dhana", "hacker1");
        authMap.put("Wynn", "hacker2");
        authMap.put("vinod", "hacker3");
        authMap.put("Devi", "hacker4");
    }


    @GetMapping("/auth")
    public ResponseEntity<String> authenticateUser(@RequestParam String username, String password) {

        log.info("Auth Call from server side");

        if (authMap.containsKey(username)) {

            if (authMap.get(username).equals(password)) {
                log.info("User Authorized");
                return ResponseEntity.ok().body("Authorized");
            } else {
                log.info("User UnAuthorized");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Unauthorized");
            }


        } else {
            log.info("User UnAuthorized");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Unauthorized");
        }


    }

    @GetMapping("/getPresignedUrl")
    public String getPresignedUrl(@RequestParam String fileName) {
        try {

            System.out.println("selected file " + fileName);

            Storage storage = StorageOptions.newBuilder()
                    .setCredentials(ServiceAccountCredentials.fromStream(new FileInputStream("C:/Users/vinod/IdeaProjects/gcpDemo/src/main/resources/key.json")))
                    .build()
                    .getService();

            String bucketName = "hackfest2024";
            BlobInfo blobInfo = BlobInfo.newBuilder(bucketName, fileName).setContentType("application/pdf").build();

            URL url = storage.signUrl(blobInfo, 15, TimeUnit.MINUTES, Storage.SignUrlOption.httpMethod(HttpMethod.PUT), Storage.SignUrlOption.withContentType());

            System.out.println("pre signe url in string form " + url.toString());
            return url.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return "Error generating presigned URL: " + e.getMessage();
        }
    }

    @GetMapping("/getData")
    public ResponseEntity<Map<String,Object>> getData( @RequestParam String bucketLocation) {

        log.info(" fetch Document Data from AI model");
        log.info("Bucket location " + bucketLocation);

        Map<String ,Object> data = new HashMap<>();

        data.put("BuildingNumberAndStreetName","Campus 5A, SEZ Unit Sarjapur-Marathalli Outer Ring Road");
        data.put("LocalityOrArea","Devarabeesanahalli Village Varthur");
        data.put("City","Bengaluru");
        data.put("State","Karnataka");
        data.put("Country","560103");
        data.put("PostalCode","India");
        data.put("lat", 12.923903688616994);
        data.put("long", 77.6845062113533);




        if(!data.isEmpty())
                return ResponseEntity.ok().body(data);
        else
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(data);






    }

}
